name: Probe STAGING SQL Server (Windows Self-Hosted)

on:
  workflow_dispatch:
    inputs:
      use_integrated:
        description: "Gunakan Windows Integrated Auth (true/false)"
        required: false
        default: "false"

# Jalankan perintah lewat cmd, lalu panggil PowerShell dengan Bypass
defaults:
  run:
    shell: cmd

jobs:
  probe:
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Ensure sqlcmd is available (detect or install)
        run: >
          powershell -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop';
           function Save-Env([string]$k,[string]$v){ [IO.File]::AppendAllText($env:GITHUB_ENV, \"$k=$v`n\") }
           $candidates = @(
             (Join-Path $env:ProgramFiles 'Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe'),
             (Join-Path $env:ProgramFiles 'Microsoft SQL Server\160\Tools\Binn\sqlcmd.exe'),
             (Join-Path $env:ProgramFiles 'Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe'),
             (Join-Path $env:ProgramFiles 'Microsoft SQL Server\110\Tools\Binn\sqlcmd.exe')
           ) + (Get-Command sqlcmd -ErrorAction SilentlyContinue | % Source)
           $exe = $candidates | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1
           if(-not $exe){
             Write-Host 'sqlcmd not found — installing via winget...';
             try{
               winget install Microsoft.SQLServer.CommandLineTools --accept-package-agreements --accept-source-agreements -h 0
             } catch {
               throw 'winget install failed. Install sqlcmd secara manual di mesin runner, lalu rerun.'
             }
             $exe = (Get-Command sqlcmd -ErrorAction SilentlyContinue | % Source)
           }
           if(-not $exe){ throw 'sqlcmd still not found after install.' }
           Write-Host ('Using sqlcmd: {0}' -f $exe);
           Save-Env 'SQLCMD_EXE' $exe"

      - name: Tool check (sqlcmd)
        run: >
          powershell -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop'; & $env:SQLCMD_EXE -? | Out-Null; Write-Host 'sqlcmd OK'"

      - name: DNS resolve
        env:
          H: ${{ secrets.STG_DB_HOST }}
        run: >
          powershell -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop';
           if([string]::IsNullOrWhiteSpace($env:H)){ throw 'Secret STG_DB_HOST tidak di-set' };
           try { Resolve-DnsName $env:H -ErrorAction Stop | Select-Object -First 3 | Format-Table -AutoSize }
           catch { Write-Host ('DNS resolve gagal: {0}' -f $_.Exception.Message) }"

      - name: TCP port check
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: >
          powershell -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop';
           $port= if([string]::IsNullOrWhiteSpace($env:P)){'1433'} else {$env:P};
           if($port -notmatch '^\d+$'){ throw ('STG_DB_PORT invalid: {0}' -f $port) };
           Write-Host ('Checking TCP {0}:{1}…' -f $env:H,$port);
           if(-not (Test-NetConnection -ComputerName $env:H -Port $port -InformationLevel Quiet)){ throw 'TCP FAILED' };
           Write-Host 'TCP OK'"

      - name: Try sqlcmd login (SELECT 1)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: >
          powershell -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop';
           $useIntegrated = '${{ github.event.inputs.use_integrated }}'.ToLower() -eq 'true';
           $port= if([string]::IsNullOrWhiteSpace($env:P)){'1433'} else {$env:P};
           if($port -notmatch '^\d+$'){ throw ('STG_DB_PORT invalid: {0}' -f $port) };
           $server = '{0},{1}' -f $env:H,$port;
           $base = @('-S',$server,'-d',$env:D,'-l','10','-b','-C');
           if($useIntegrated){ $args = $base + '-E' }
           else {
             if([string]::IsNullOrWhiteSpace($env:U) -or [string]::IsNullOrWhiteSpace($env:W)){ throw 'SQL Auth dipilih tapi STG_DB_USER/PASSWORD kosong' }
             $args = $base + @('-U',$env:U,'-P',$env:W)
           }
           $args = $args + @('-Q','SET NOCOUNT ON; SELECT 1 AS ok, DB_NAME() AS db, SYSTEM_USER AS login;');
           Write-Host ('Running: {0} {1}' -f $env:SQLCMD_EXE, ($args -join ' '));
           & $env:SQLCMD_EXE @args;
           if($LASTEXITCODE -ne 0){ throw ('sqlcmd failed with exit code {0}' -f $LASTEXITCODE) };
           Write-Host 'SELECT 1 OK'"
