name: Probe STAGING SQL Server (Windows Self-Hosted)

on:
  workflow_dispatch:
    inputs:
      use_integrated:
        description: "Gunakan Windows Integrated Auth (true/false)"
        required: false
        default: "false"

defaults:
  run:
    shell: cmd

jobs:
  probe:
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Use sqlcmd path from repo variable
        run: |
          echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
          if not exist "${{ vars.SQLCMD_EXE }}" (
            echo sqlcmd.exe not found at: ${{ vars.SQLCMD_EXE }}
            exit /b 1
          )

      - name: Tool check (sqlcmd)
        run: >
          powershell -NoProfile -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop'; & $env:SQLCMD_EXE -? | Out-Null; Write-Host 'sqlcmd OK'"

      - name: DNS resolve
        env:
          H: ${{ secrets.STG_DB_HOST }}
        run: |
          echo Resolving %H% ...
          nslookup %H% || (echo DNS FAILED & exit /b 1)


      - name: TCP port check
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: >
          powershell -NoProfile -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop';
           $p = '%P%'; if([string]::IsNullOrWhiteSpace($p)){$p='1433'};
           Write-Host ('Checking TCP %H%:{0} ...' -f $p);
           $ok = Test-NetConnection -ComputerName '%H%' -Port ([int]$p) -InformationLevel Quiet;
           if(-not $ok){ Write-Host 'TCP FAILED'; exit 1 } else { Write-Host 'TCP OK' }"

      - name: Try sqlcmd login (SELECT 1)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: >
          powershell -NoProfile -ExecutionPolicy Bypass -Command
          "$ErrorActionPreference='Stop';
           $useIntegrated = '${{ github.event.inputs.use_integrated }}'.ToLower() -eq 'true';
           $port = '%P%'; if([string]::IsNullOrWhiteSpace($port)){$port='1433'};
           if($port -notmatch '^\d+$'){ Write-Host ('STG_DB_PORT invalid: {0}' -f $port); exit 1 };
           $server = '{0},{1}' -f '%H%',$port;
           $base = @('-S',$server,'-d','%D%','-l','10','-b','-C');
           if($useIntegrated){ $args = $base + '-E' }
           else {
             if([string]::IsNullOrWhiteSpace('%U%') -or [string]::IsNullOrWhiteSpace('%W%')){
               Write-Host 'SQL Auth dipilih tapi STG_DB_USER/PASSWORD kosong'; exit 1
             }
             $args = $base + @('-U','%U%','-P','%W%')
           }
           $args += @('-Q','SET NOCOUNT ON; SELECT 1 AS ok, DB_NAME() AS db, SYSTEM_USER AS login;');
           Write-Host ('Running: {0} {1}' -f $env:SQLCMD_EXE, ($args -join ' '));
           & $env:SQLCMD_EXE @args;
           if($LASTEXITCODE -ne 0){ Write-Host ('sqlcmd failed with exit code {0}' -f $LASTEXITCODE); exit 1 }
           Write-Host 'SELECT 1 OK'"

      
