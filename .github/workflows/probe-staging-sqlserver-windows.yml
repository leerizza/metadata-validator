name: Probe STAGING SQL Server (Windows Self-Hosted)

on:
  workflow_dispatch:
    inputs:
      use_integrated:
        description: "Gunakan Windows Integrated Auth (true/false)"
        required: false
        default: "false"

jobs:
  probe:
    runs-on: [self-hosted, Windows]
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Ensure sqlcmd is available (detect or install)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "üîç Checking sqlcmd availability..."

          # 0) Honor repo variable if defined
          $pref = "${{ vars.SQLCMD_EXE }}"
          if ($pref -and (Test-Path $pref)) {
              $exe = $pref
              Write-Host "‚úÖ Using sqlcmd from repo variable: $exe"
          }

          # 1) Try PATH
          if (-not $exe) {
              try { $exe = (Get-Command sqlcmd -ErrorAction SilentlyContinue).Source } catch {}
          }

          # 2) Try common install folders
          if (-not $exe) {
              $paths = @(
                  "$env:ProgramFiles\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe",
                  "$env:ProgramFiles\Microsoft SQL Server\160\Tools\Binn\sqlcmd.exe",
                  "$env:ProgramFiles\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe"
              )
              $exe = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1
          }

          # 3) Try winget install
          if (-not $exe) {
              Write-Host "‚öôÔ∏è sqlcmd not found, attempting winget install..."
              try {
                  winget install Microsoft.SQLServer.CommandLineTools --accept-package-agreements --accept-source-agreements -h 0
                  $exe = (Get-Command sqlcmd -ErrorAction SilentlyContinue).Source
              } catch {
                  Write-Warning "‚ö†Ô∏è Winget not available or install failed. Please install manually."
              }
          }

          if (-not $exe) {
              throw "‚ùå sqlcmd not found. Please install SQL Server Command Line Utilities or define SQLCMD_EXE variable."
          }

          Write-Host "‚úÖ sqlcmd found at: $exe"
          "SQLCMD_EXE=$exe" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Tool check (sqlcmd)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "üîß Checking sqlcmd tool..."
          & $env:SQLCMD_EXE -? | Out-Null
          Write-Host "‚úÖ sqlcmd is working!"

      - name: DNS resolve
        shell: pwsh
        env:
          H: ${{ secrets.STG_DB_HOST }}
        run: |
          $ErrorActionPreference = "Stop"
          if (-not $env:H) { throw "‚ùå Secret STG_DB_HOST not set" }
          Write-Host "üîé Resolving DNS for $env:H..."
          try {
              Resolve-DnsName $env:H -ErrorAction Stop | Select-Object -First 3 | Format-Table -AutoSize
          } catch {
              Write-Warning "‚ö†Ô∏è DNS resolve failed: $($_.Exception.Message)"
          }

      - name: TCP port check
        shell: pwsh
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: |
          $ErrorActionPreference = "Stop"
          $port = if ($env:P) { $env:P } else { "1433" }
          if ($port -notmatch "^\d+$") { throw "Invalid port: $port" }
          Write-Host "üåê Checking TCP connection to $env:H:$port..."
          if (-not (Test-NetConnection -ComputerName $env:H -Port $port -InformationLevel Quiet)) {
              throw "‚ùå TCP connection failed"
          }
          Write-Host "‚úÖ TCP port $port reachable!"

      - name: Try sqlcmd login (SELECT 1)
        shell: pwsh
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"
          $useIntegrated = "${{ github.event.inputs.use_integrated }}".ToLower() -eq "true"
          $port = if ($env:P) { $env:P } else { "1433" }
          $server = "$($env:H),$port"

          Write-Host "üß© Testing SQL login to $server / $env:D"

          $base = @("-S", $server, "-d", $env:D, "-l", "10", "-b", "-C")
          if ($useIntegrated) {
              $args = $base + "-E"
          } else {
              if (-not $env:U -or -not $env:W) { throw "Missing credentials for SQL Auth" }
              $args = $base + @("-U", $env:U, "-P", $env:W)
          }

          $args += @("-Q", "SET NOCOUNT ON; SELECT 1 AS ok, DB_NAME() AS db, SYSTEM_USER AS login;")

          Write-Host "üì§ Running: $env:SQLCMD_EXE $($args -join ' ')"
          & $env:SQLCMD_EXE @args
          if ($LASTEXITCODE -ne 0) {
              throw "‚ùå sqlcmd failed with exit code $LASTEXITCODE"
          }
          Write-Host "‚úÖ SELECT 1 query success!"
