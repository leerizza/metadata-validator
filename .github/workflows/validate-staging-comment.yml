name: Validate → Deploy STAGING → Comment PR

on:
  pull_request:
    paths:
      - "DO-NOT-TRIGGER/**"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run validator (scan changed SQL only when PR)
        id: validator
        run: |
          set -e
          git fetch --no-tags --prune --depth=1 origin ${{ github.base_ref }}
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }}... | grep -E '\.sql$' || true)
          if [ -n "$CHANGED" ]; then
            echo "Changed SQL files:"
            echo "$CHANGED"
            python validate_sql.py --junit report-metadata.xml --files $CHANGED
          else
            echo "No changed SQL files, scanning all *.sql"
            python validate_sql.py --junit report-metadata.xml
          fi

      - name: Upload JUnit report
        uses: actions/upload-artifact@v4
        with:
          name: junit
          path: report-metadata.xml

  deploy_staging:
    if: github.event_name == 'pull_request'
    needs: validate
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Install sqlcmd (ODBC 18)
        run: |
          sudo su -c 'curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -'
          sudo add-apt-repository "$(curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Deploy to STAGING (deploy/*.sql sorted)
        id: deploy
        env:
          DB_HOST: ${{ secrets.STG_DB_HOST }}
          DB_PORT: ${{ secrets.STG_DB_PORT }}
          DB_NAME: ${{ secrets.STG_DB_NAME }}
          DB_USER: ${{ secrets.STG_DB_USER }}
          DB_PASSWORD: ${{ secrets.STG_DB_PASSWORD }}
          SQLCMDTRUSTSERVERCERT: "true"
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          SCRIPTS=( $(ls -1 deploy/*.sql | sort) )
          if [ ${#SCRIPTS[@]} -eq 0 ]; then
            echo "No SQL files in deploy/. Skipping staging deploy." | tee deploy-summary.md
            exit 0
          fi
          echo "## Staging Deploy" > deploy-summary.md
          echo "" >> deploy-summary.md
          echo "**Target:** ${DB_HOST}:${DB_PORT}/${DB_NAME}" >> deploy-summary.md
          echo "" >> deploy-summary.md
          echo "**Executed files:**" >> deploy-summary.md
          for f in "${SCRIPTS[@]}"; do
            echo "- \`${f}\`" >> deploy-summary.md
            /opt/mssql-tools18/bin/sqlcmd \
              -S "${DB_HOST},${DB_PORT}" \
              -d "${DB_NAME}" \
              -U "${DB_USER}" \
              -P "${DB_PASSWORD}" \
              -l 30 -b -C \
              -i "$f"
          done
          echo "" >> deploy-summary.md
          echo "**Recent objects (created/modified in last 30 minutes)**" >> deploy-summary.md
          /opt/mssql-tools18/bin/sqlcmd \
            -S "${DB_HOST},${DB_PORT}" -d "${DB_NAME}" -U "${DB_USER}" -P "${DB_PASSWORD}" -l 15 -C -h-1 -W -s ' | ' -Q "
              SET NOCOUNT ON;
              SELECT TOP (30)
                s.name + '.' + t.name AS table_name,
                t.create_date,
                t.modify_date
              FROM sys.tables t
              JOIN sys.schemas s ON s.schema_id = t.schema_id
              WHERE t.create_date >= DATEADD(MINUTE, -30, SYSUTCDATETIME())
                 OR t.modify_date >= DATEADD(MINUTE, -30, SYSUTCDATETIME())
              ORDER BY t.modify_date DESC, t.create_date DESC;
            " >> deploy-summary.md || echo "_(No recent changes or query failed)_" >> deploy-summary.md

      - name: Upload deploy summary
        uses: actions/upload-artifact@v4
        with:
          name: staging-deploy-summary
          path: deploy-summary.md

      - name: Comment on PR with validator + staging deploy summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const header = "### ✅ Validator passed & Staging Deploy\n" +
                           "**Workflow:** " + process.env.GITHUB_WORKFLOW + "\n\n";
            let body = header;
            try {
              const sum = fs.readFileSync('deploy-summary.md', 'utf8');
              body += sum;
            } catch (e) {
              body += "_No deploy summary found._";
            }
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });
