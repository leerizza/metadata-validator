name: Validate → Deploy STAGING → Comment PR (Windows Self-Hosted)

on:
  pull_request:
    paths:
      - "tables/**/*.yml"
      - "tables/**/*.yaml"
      - "deploy/**/*.sql"
      - "rules.yml"
      - "validate_sql.py"
      - "scripts/metadata_validate_and_render.py"
      - ".github/workflows/validate-staging-comment-windows.yml"

defaults:
  run:
    shell: cmd

jobs:
  validate:
    runs-on: [self-hosted, Windows]

    steps:
      - uses: actions/checkout@v4

            # 1) Deteksi Python yang sudah terpasang di runner
      - name: Resolve Python path (skip WindowsApps alias)
        run: |
          where python || (echo ❌ Python not found in PATH & exit /b 1)
          set "PY="
          for /f "delims=" %%i in ('where python') do (
            rem skip alias dari Microsoft Store
            echo %%i | findstr /i "\\WindowsApps\\" >nul && (rem skip) || (
              set "PY=%%i"
              goto :found
            )
          )
          :found
          if "%PY%"=="" (echo ❌ No real python.exe found & exit /b 1)
          echo Using Python: %PY%
          echo PYTHON_EXE=%PY%>>%GITHUB_ENV%


      # 2) Buat virtualenv lokal di workspace (tidak perlu admin)
      - name: Create venv and install deps
        run: |
          "%PYTHON_EXE%" --version
          "%PYTHON_EXE%" -m venv .venv
          set "VENV_PY=%CD%\.venv\Scripts\python.exe"
          echo VENV_PY=%VENV_PY%>>%GITHUB_ENV%
          "%VENV_PY%" -m pip install --upgrade pip
          "%VENV_PY%" -m pip install -r requirements.txt


      # 3) (opsional) jalankan validator lama kalau masih dipakai
      - name: Run legacy validator (optional)
        continue-on-error: true
        env:
          PYTHONUTF8: "1"            # aktifkan UTF-8 mode
          PYTHONIOENCODING: "UTF-8"  # paksa stdout/stderr UTF-8
        run: |
          chcp 65001 >NUL            rem set console code page ke UTF-8
          "%VENV_PY%" -X utf8 validate_sql.py --junit report.xml



      # Simpan hasil render untuk job berikutnya
      - name: Upload generated SQL
        uses: actions/upload-artifact@v4
        with:
          name: generated-sql
          path: deploy/*.sql

  deploy_staging:
    needs: validate
    runs-on: [self-hosted, Windows]
    environment: staging

    steps:
      - uses: actions/checkout@v4

      # Ambil file SQL hasil generate dari job validate
      - name: Download generated SQL
        uses: actions/download-artifact@v4
        with:
          name: generated-sql
          path: deploy

      # Pastikan sqlcmd path tersedia untuk STEP BERIKUTNYA
      - name: Use sqlcmd path from repo variable
        run: |
          echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
          if not exist "${{ vars.SQLCMD_EXE }}" (
            echo sqlcmd.exe not found at: ${{ vars.SQLCMD_EXE }}
            exit /b 1
          )

      # Preflight — tampilkan target
      - name: Echo target
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
        run: |
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"
          if "%H%"=="" ( echo ❌ Secret STG_DB_HOST kosong & exit /b 1 )
          echo Using sqlcmd: %SQLCMD_EXE%
          echo Target: %H%,%PORT% / DB=%D%

      # Preflight — DNS
      - name: DNS resolve
        env:
          H: ${{ secrets.STG_DB_HOST }}
        run: nslookup %H% || (echo ❌ DNS FAILED & exit /b 1)

      # Preflight — TCP
      - name: TCP port check
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: |
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"
          echo Checking TCP connection to %H%:%PORT% ...
          powershell -Command "if(!(Test-NetConnection -ComputerName '%H%' -Port ([int]'%PORT%') -InformationLevel Quiet)){exit 1}"

      # Preflight — Test login SELECT 1
      - name: Test sqlcmd login (SELECT 1)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"
          if errorlevel 1 exit /b 1

      # Guard — block tipe terlarang pada deploy/*.sql
      - name: Block disallowed types in deploy SQL (no MAX, no legacy LOB)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host 'Scanning deploy SQL for disallowed patterns...'

          # Ambil semua SQL di folder deploy (rekursif). Kalau tidak ada, lolos.
          $files = Get-ChildItem -Path 'deploy' -Filter '*.sql' -Recurse -ErrorAction SilentlyContinue
          if (-not $files) {
            Write-Host 'No SQL files under deploy/.'
            exit 0
          }

          # Pola larangan
          $patMax    = '\b(?:n?varchar|varbinary)\s*\(\s*max\s*\)'
          $patLegacy = '\b(?:text|ntext|image)\b'

          # Scan
          $bad    = Select-String -Path $files.FullName -Pattern $patMax
          $legacy = Select-String -Path $files.FullName -Pattern $patLegacy

          $hasBad    = ($bad    | Measure-Object).Count -gt 0
          $hasLegacy = ($legacy | Measure-Object).Count -gt 0

          if ($hasBad -or $hasLegacy) {
            Write-Host 'Found disallowed type(s) in:'
            if ($hasBad)    { ($bad.Path    | Sort-Object -Unique) | ForEach-Object { Write-Host " - $_" } }
            if ($hasLegacy) { ($legacy.Path | Sort-Object -Unique) | ForEach-Object { Write-Host " - $_" } }
            exit 1
          }

          Write-Host 'SQL type validation passed.'



      # ==== DEPLOY ====
      - name: Deploy to STAGING (dwdb-sol / DQ_DEV)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"

          if exist deploy\*.sql (
            for /f "delims=" %%F in ('dir /b /o:n deploy\*.sql') do (
              echo Executing %%~nxF ...
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "deploy\%%F"
              if errorlevel 1 (
                echo ❌ FAILED on %%~nxF
                exit /b 1
              )
            )
          ) else (
            echo _No SQL files in deploy/._
          )

      # ==== COMMENT PR ====
      - name: Comment on PR (summary)
        uses: actions/github-script@v7
        env:
          TARGET_HOST: ${{ secrets.STG_DB_HOST }}
          TARGET_DB: ${{ secrets.STG_DB_NAME }}
        with:
          script: |
            const body = [
              "### ✅ Metadata validated & tables deployed to **DQ_DEV**",
              `- Workflow: ${process.env.GITHUB_WORKFLOW}`,
              `- Target: \`${process.env.TARGET_HOST}\` / \`${process.env.TARGET_DB}\``,
              "",
              "Artifacts: **generated-sql** (lihat tab Artifacts)."
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
