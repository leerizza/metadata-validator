name: Deploy to Production

on:
  push:
    branches:
      - master    # ganti jika default branch kamu bukan 'main'

concurrency:
  group: prod-deploy
  cancel-in-progress: false

defaults:
  run:
    shell: cmd

jobs:
  deploy_prod:
    name: deploy_prod
    runs-on: [self-hosted, Windows]  # pastikan runner punya label Windows
    environment: production          # aktifkan Required reviewers di Settings > Environments > production
    steps:
      - uses: actions/checkout@v4

      - name: Prepare logs folder
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $root = Join-Path $env:GITHUB_WORKSPACE 'deploy_logs_prod'
          if (!(Test-Path $root)) {
            New-Item -ItemType Directory -Path $root -Force | Out-Null
          }
          "LOGDIR=$root" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii

      - name: Resolve sqlcmd
        shell: powershell
        env:
          VAR_SQLCMD: ${{ vars.SQLCMD_EXE }}   # optional: set di repo Variables
        run: |
          $ErrorActionPreference = 'Stop'
          function Exists($p){ if([string]::IsNullOrWhiteSpace($p)){return $false}; Test-Path $p }
          $candidates = @()
          if ($env:VAR_SQLCMD) { $candidates += $env:VAR_SQLCMD }

          try {
            $found = & where.exe sqlcmd 2>$null
            if ($LASTEXITCODE -eq 0) {
              $candidates += ($found -split "`r?`n" | Where-Object { $_ -and (Test-Path $_) })
            }
          } catch {}

          $candidates += @(
            "C:\Program Files\SqlCmd\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe"
          )

          $pick = $candidates | Where-Object { Exists $_ } | Select-Object -First 1
          if (-not $pick) { throw "sqlcmd.exe not found. Set repo variable SQLCMD_EXE or install SQL tools." }

          "SQLCMD_EXE=$pick" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
          Write-Host "Using sqlcmd: $pick"

      - name: Echo target
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
        run: |
          set "PORT=%PROD_DB_PORT%" & if "%PORT%"=="" set "PORT=1433"
          echo Target: %PROD_DB_HOST%,%PORT% / DB=%PROD_DB_NAME%

      - name: DNS & TCP check
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}
        run: |
          nslookup %PROD_DB_HOST% || (echo DNS FAIL & exit /b 1)
          powershell -Command "if(!(Test-NetConnection -ComputerName '%PROD_DB_HOST%' -Port ([int]('%PROD_DB_PORT%' -ne '' ? '%PROD_DB_PORT%' : '1433')) -InformationLevel Quiet)){exit 1}"

      - name: Test sqlcmd login (SELECT 1)
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          set "PORT=%PROD_DB_PORT%" & if "%PORT%"=="" set "PORT=1433"
          "%SQLCMD_EXE%" -S %PROD_DB_HOST%,%PORT% -d %PROD_DB_NAME% -U %PROD_DB_USER% -P %PROD_DB_PASSWORD% -l 10 -b -C -Q "SELECT 1"

      - name: Deploy to PRODUCTION (deploy/*.sql sorted)
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          LOGDIR: ${{ env.LOGDIR }}
        run: |
          setlocal enabledelayedexpansion
          if "%LOGDIR%"=="" set "LOGDIR=%CD%\deploy_logs_prod"
          if not exist "%LOGDIR%" mkdir "%LOGDIR%"
          set "PORT=%PROD_DB_PORT%" & if "%PORT%"=="" set "PORT=1433"

          if not exist deploy\*.sql (
            echo No SQL files in deploy\ .
            exit /b 0
          )

          for /f "delims=" %%F in ('dir /b /o:n deploy\*.sql') do (
            set "OUTLOG=%LOGDIR%\%%~nF.out.txt"
            echo Executing %%F ... > "!OUTLOG!"
            "%SQLCMD_EXE%" -S %PROD_DB_HOST%,%PORT% -d %PROD_DB_NAME% -U %PROD_DB_USER% -P %PROD_DB_PASSWORD% -b -C -i "deploy\%%F" -o "!OUTLOG!"
            if errorlevel 1 (
              echo FAILED on %%F
              exit /b 1
            )
          )
          echo PRODUCTION deploy done.

      - name: Upload deploy logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: production-deploy-logs
          path: |
            deploy_logs_prod/**
            deploy/*.sql
          if-no-files-found: warn
