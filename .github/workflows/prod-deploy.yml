name: Deploy to Production (on PR merged)

on:
  pull_request_target:
    types: [closed]

concurrency:
  group: prod-deploy
  cancel-in-progress: false

defaults:
  run:
    shell: cmd

jobs:
  deploy_prod:
    name: deploy_prod
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'master'
    runs-on: [self-hosted, Windows]
    environment: production

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve sqlcmd
        shell: powershell
        env:
          VAR_SQLCMD: ${{ vars.SQLCMD_EXE }}
        run: |
          $ErrorActionPreference='Stop'
          function Exists($p){ if([string]::IsNullOrWhiteSpace($p)){return $false}; Test-Path $p }
          $c=@()
          if($env:VAR_SQLCMD){ $c+=$env:VAR_SQLCMD }
          try{
            $found=& where.exe sqlcmd 2>$null
            if($LASTEXITCODE -eq 0){ $c+=($found -split "`r?`n" | ? { $_ -and (Test-Path $_) }) }
          }catch{}
          $c+@(
            "C:\Program Files\SqlCmd\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe"
          )
          $pick=$c|?{Exists $_}|Select-Object -First 1
          if(-not $pick){ throw "sqlcmd.exe not found. Set repo variable SQLCMD_EXE or install SQL tools." }
          "SQLCMD_EXE=$pick" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
          Write-Host "Using sqlcmd: $pick"

      - name: Preflight PROD
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          nslookup %H% || (echo ❌ DNS FAILED & exit /b 1)
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          powershell -Command "if(!(Test-NetConnection -ComputerName '%H%' -Port ([int]'%PORT%') -InformationLevel Quiet)){exit 1}"
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"

      - name: Compute changed SQL (robust for PR merged)
        id: changes
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          git config --global --add safe.directory "$env:GITHUB_WORKSPACE" 2>$null
          try { git fetch --all --tags --prune 2>$null } catch {}

          $baseSha = '${{ github.event.pull_request.base.sha }}'
          if ([string]::IsNullOrWhiteSpace($baseSha) -or $baseSha -match '^0+$') {
            $range = 'HEAD~1...HEAD'
          } else {
            $range = "$baseSha...HEAD"
          }

          $changed = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/*.sql"
          if ($changed) {
            $p='deploy\_changed_sql.txt'
            $changed | Sort-Object | Set-Content -Encoding UTF8 -LiteralPath $p
            "CHANGED_SQL_LIST=$p" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
            "has_changes=true"     | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Changed SQL files (range $range):"
            Get-Content $p | % { " - $_" }
          } else {
            "has_changes=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "::notice title=No changed SQL::Skipping deploy."
          }

      - name: Deploy to PRODUCTION (changed only)
        if: steps.changes.outputs.has_changes == 'true'
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_sql.txt`) do (
            if exist "%%F" (
              echo PROD -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            )
          )
