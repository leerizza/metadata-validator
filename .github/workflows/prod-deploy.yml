name: Deploy to PRODUCTION (Manual, Modular)

on:
  workflow_dispatch:
    inputs:
      target_ref:
        description: "Reference to deploy (tag/branch/commit)"
        required: true
        default: "main"
      note:
        description: "Catatan (opsional)"
        required: false
        default: ""

concurrency:
  group: prod-deploy
  cancel-in-progress: false

defaults:
  run:
    shell: cmd

jobs:
  compute_changes:
    runs-on: [self-hosted, Windows]
    outputs:
      has_create: ${{ steps.outvars.outputs.has_create }}
      has_alter:  ${{ steps.outvars.outputs.has_alter }}
      has_drop:   ${{ steps.outvars.outputs.has_drop }}
      create_count: ${{ steps.outvars.outputs.create_count }}
      alter_count:  ${{ steps.outvars.outputs.alter_count }}
      drop_count:   ${{ steps.outvars.outputs.drop_count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_ref }}

      - name: Resolve sqlcmd
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $sqlcmdExe = $null
          if ($env:VAR_SQLCMD -and (Test-Path $env:VAR_SQLCMD)) {
              $sqlcmdExe = $env:VAR_SQLCMD
          }
          if (!$sqlcmdExe) {
              $commonPaths = @(
                  "C:\Program Files\SqlCmd\sqlcmd.exe",
                  "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe",
                  "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe",
                  "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe",
                  "C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe"
              )
              foreach ($path in $commonPaths) {
                  if (Test-Path $path) {
                      $sqlcmdExe = $path
                      break
                  }
              }
          }
          if (!$sqlcmdExe) {
              try {
                  $found = where.exe sqlcmd 2>$null
                  if ($LASTEXITCODE -eq 0 -and $found) {
                      $sqlcmdExe = $found.Split([Environment]::NewLine) | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1
                  }
              } catch {}
          }
          if (!$sqlcmdExe) {
              throw "sqlcmd.exe not found"
          }
          Write-Host "Using sqlcmd: $sqlcmdExe"
          "SQLCMD_EXE=$sqlcmdExe" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii

      - name: Prep logs
        shell: powershell
        run: |
          $root = Join-Path $env:GITHUB_WORKSPACE 'deploy_logs_prod'
          if (!(Test-Path $root)) { 
              New-Item -ItemType Directory -Path $root -Force | Out-Null 
          }
          "LOGDIR=$root" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii

      - name: Preflight PROD
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          nslookup %H% || (echo DNS FAILED & exit /b 1)
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          powershell -Command "Test-NetConnection -ComputerName '%H%' -Port %PORT% -InformationLevel Quiet"
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"

      - name: Get last deployed commit
        id: last_deploy
        shell: powershell
        run: |
          $lastTag = git tag -l "prod-*" --sort=-creatordate | Select-Object -First 1
          if ($lastTag) {
              Write-Host "Last production tag: $lastTag"
              "LAST_DEPLOYED_REF=$lastTag" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
              "has_previous_deploy=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
              Write-Host "No previous production tag found"
              "LAST_DEPLOYED_REF=origin/main" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
              "has_previous_deploy=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Compute changed files
        id: compute
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          git config --global --add safe.directory "$env:GITHUB_WORKSPACE" 2>$null
          try { 
              git fetch origin --depth=100 2>$null
              git fetch --all --tags --prune 2>$null 
          } catch {
              Write-Host "Git fetch completed"
          }
          $lastRef = $env:LAST_DEPLOYED_REF
          $currentRef = "HEAD"
          Write-Host "Comparing: $lastRef...$currentRef"
          Write-Host "Current branch: $(git branch --show-current)"
          Write-Host "Current HEAD: $(git rev-parse HEAD)"
          Write-Host "Last deployed ref: $lastRef"
          $lists = @{
              create = @{ pattern = "deploy/create/*.sql"; out = "deploy\_changed_create.txt" }
              alter = @{ pattern = "deploy/alter/*.sql"; out = "deploy\_changed_alter.txt" }
              drop = @{ pattern = "deploy/drop/*.sql"; out = "deploy\_changed_drop.txt" }
          }
          $flags = @{ create = $false; alter = $false; drop = $false }
          $counts = @{ create = 0; alter = 0; drop = 0 }
          foreach ($k in $lists.Keys) {
              $p = $lists[$k].pattern
              $o = $lists[$k].out
              Write-Host "Checking $k files"
              $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR "$lastRef...$currentRef" -- $p 2>$null
              $wt = git ls-files -mo --exclude-standard -- $p 2>$null
              $all = @()
              if ($diff) { $all += $diff }
              if ($wt) { $all += $wt }
              $all = $all | Where-Object { $_ -and (Test-Path $_) } | Sort-Object -Unique
              if ($all.Count -gt 0) {
                  $all | Set-Content -LiteralPath $o -Encoding UTF8
                  $flags[$k] = $true
                  $counts[$k] = $all.Count
                  Write-Host "OK $k changed ($($all.Count) files)"
                  $all | ForEach-Object { 
                      Write-Host "   - $_" 
                  }
              } else {
                  Write-Host "INFO $k no changes detected"
                  $flags[$k] = $false
                  $counts[$k] = 0
              }
          }
          if (-not ($flags.create -or $flags.alter -or $flags.drop)) {
              Write-Host "Nothing to deploy"
          }
          Write-Host "DEPLOYMENT DETECTION SUMMARY"
          Write-Host "CREATE: $($counts.create) files"
          Write-Host "ALTER: $($counts.alter) files"
          Write-Host "DROP: $($counts.drop) files"
          Write-Host "Range: $lastRef...$currentRef"

      - name: Expose outputs
        id: outvars
        shell: powershell
        run: |
          function HasList($f) { 
              if (!(Test-Path $f -PathType Leaf -ErrorAction SilentlyContinue)) { 
                  return $false 
              }
              $content = Get-Content $f -ErrorAction SilentlyContinue
              return ($content -and $content.Count -gt 0)
          }
          $hasCreate = 'false'
          $createCount = 0
          if (HasList 'deploy\_changed_create.txt') { 
              $hasCreate = 'true'
              $createCount = (Get-Content 'deploy\_changed_create.txt').Count
          }
          $hasAlter = 'false'
          $alterCount = 0
          if (HasList 'deploy\_changed_alter.txt') { 
              $hasAlter = 'true'
              $alterCount = (Get-Content 'deploy\_changed_alter.txt').Count
          }
          $hasDrop = 'false'
          $dropCount = 0
          if (HasList 'deploy\_changed_drop.txt') { 
              $hasDrop = 'true'
              $dropCount = (Get-Content 'deploy\_changed_drop.txt').Count
          }
          "has_create=$hasCreate" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "has_alter=$hasAlter" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "has_drop=$hasDrop" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "create_count=$createCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "alter_count=$alterCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "drop_count=$dropCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Output flags:"
          Write-Host "  has_create=$hasCreate count=$createCount"
          Write-Host "  has_alter=$hasAlter count=$alterCount"
          Write-Host "  has_drop=$hasDrop count=$dropCount"

      - name: Upload change lists
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-changed-sql-lists
          path: deploy\_changed_*.txt
          if-no-files-found: ignore

  deploy_create_prod:
    needs: compute_changes
    if: needs.compute_changes.outputs.has_create == 'true' && needs.compute_changes.outputs.create_count != '0'
    runs-on: [self-hosted, Windows]
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_ref }}
      - uses: actions/download-artifact@v4
        with:
          name: prod-changed-sql-lists
          path: ./

      - name: Debug file structure
        shell: powershell
        run: |
          Write-Host "Current Directory Structure"
          Get-ChildItem -Recurse | Where-Object { $_.Name -like "*changed*" -or $_.Name -like "*create*" } | Select-Object FullName, Length
          Write-Host "CREATE Files List"
          if (Test-Path 'deploy\_changed_create.txt') {
              $files = Get-Content 'deploy\_changed_create.txt'
              Write-Host "Files to deploy:"
              foreach ($file in $files) {
                  Write-Host "  - $file"
                  if (Test-Path $file) {
                      Write-Host "    FOUND"
                  }
              }
          }

      - name: Use sqlcmd
        run: echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%

      - name: Verify change list
        shell: powershell
        run: |
          if (!(Test-Path 'deploy\_changed_create.txt')) {
              Write-Host "File not found"
              exit 1
          }
          $content = Get-Content 'deploy\_changed_create.txt'
          if (!$content -or $content.Count -eq 0) {
              Write-Host "File is empty"
              exit 1
          }
          Write-Host "Found $($content.Count) files"

      - name: Deploy CREATE files
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $PORT = $env:P
          if ([string]::IsNullOrWhiteSpace($PORT)) { $PORT = "1433" }
          if (!(Test-Path 'deploy\_changed_create.txt')) {
              Write-Error "No changed CREATE list found"
              exit 1
          }
          $files = Get-Content 'deploy\_changed_create.txt' | Where-Object { $_.Trim() }
          if ($files.Count -eq 0) {
              Write-Error "No files found"
              exit 1
          }
          $DEPLOYED = 0
          foreach ($file in $files) {
              $trimmedFile = $file.Trim()
              if ([string]::IsNullOrWhiteSpace($trimmedFile)) { continue }
              Write-Host "Deploying: $trimmedFile"
              if (Test-Path $trimmedFile) {
                  $fullPath = Resolve-Path $trimmedFile
                  Write-Host "File found at: $fullPath"
                  $sqlcmdArgs = @(
                      "-S", "$env:H,$PORT",
                      "-d", "$env:D", 
                      "-U", "$env:U",
                      "-P", "$env:W",
                      "-b", "-C",
                      "-i", "`"$fullPath`""
                  )
                  Write-Host "Executing sqlcmd"
                  $process = Start-Process -FilePath $env:SQLCMD_EXE -ArgumentList $sqlcmdArgs -Wait -PassThru -NoNewWindow
                  if ($process.ExitCode -eq 0) {
                      Write-Host "SUCCESS: $trimmedFile"
                      $DEPLOYED++
                  } else {
                      Write-Host "FAILED: $trimmedFile - Exit code: $($process.ExitCode)"
                      exit 1
                  }
              } else {
                  Write-Host "ERROR: File not found: $trimmedFile"
                  exit 1
              }
          }
          Write-Host "Deployed $DEPLOYED files"

  deploy_alter_prod:
    needs: [compute_changes, deploy_create_prod]
    if: needs.compute_changes.outputs.has_alter == 'true' && needs.compute_changes.outputs.alter_count != '0'
    runs-on: [self-hosted, Windows]
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_ref }}
      - uses: actions/download-artifact@v4
        with:
          name: prod-changed-sql-lists
          path: ./

      - name: Use sqlcmd
        run: echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%

      - name: Deploy ALTER files
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $PORT = $env:P
          if ([string]::IsNullOrWhiteSpace($PORT)) { $PORT = "1433" }
          if (!(Test-Path 'deploy\_changed_alter.txt')) {
              Write-Error "No changed ALTER list found"
              exit 1
          }
          $files = Get-Content 'deploy\_changed_alter.txt' | Where-Object { $_.Trim() }
          $DEPLOYED = 0
          foreach ($file in $files) {
              $trimmedFile = $file.Trim()
              if (Test-Path $trimmedFile) {
                  Write-Host "Deploying: $trimmedFile"
                  $fullPath = Resolve-Path $trimmedFile
                  $sqlcmdArgs = @(
                      "-S", "$env:H,$PORT",
                      "-d", "$env:D", 
                      "-U", "$env:U",
                      "-P", "$env:W",
                      "-b", "-C",
                      "-i", "`"$fullPath`""
                  )
                  $process = Start-Process -FilePath $env:SQLCMD_EXE -ArgumentList $sqlcmdArgs -Wait -PassThru -NoNewWindow
                  if ($process.ExitCode -eq 0) {
                      Write-Host "SUCCESS: $trimmedFile"
                      $DEPLOYED++
                  } else {
                      Write-Error "Failed to deploy: $trimmedFile"
                      exit 1
                  }
              } else {
                  Write-Error "File not found: $trimmedFile"
                  exit 1
              }
          }
          Write-Host "Deployed $DEPLOYED ALTER files"

  deploy_drop_prod:
    needs: [compute_changes, deploy_create_prod, deploy_alter_prod]
    if: needs.compute_changes.outputs.has_drop == 'true' && needs.compute_changes.outputs.drop_count != '0'
    runs-on: [self-hosted, Windows]
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_ref }}
      - uses: actions/download-artifact@v4
        with:
          name: prod-changed-sql-lists
          path: ./

      - name: Use sqlcmd
        run: echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%

      - name: Deploy DROP files
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $PORT = $env:P
          if ([string]::IsNullOrWhiteSpace($PORT)) { $PORT = "1433" }
          if (!(Test-Path 'deploy\_changed_drop.txt')) {
              Write-Error "No changed DROP list found"
              exit 1
          }
          $files = Get-Content 'deploy\_changed_drop.txt' | Where-Object { $_.Trim() }
          $DEPLOYED = 0
          foreach ($file in $files) {
              $trimmedFile = $file.Trim()
              if (Test-Path $trimmedFile) {
                  Write-Host "Deploying: $trimmedFile"
                  $fullPath = Resolve-Path $trimmedFile
                  $sqlcmdArgs = @(
                      "-S", "$env:H,$PORT",
                      "-d", "$env:D", 
                      "-U", "$env:U",
                      "-P", "$env:W",
                      "-b", "-C",
                      "-i", "`"$fullPath`""
                  )
                  $process = Start-Process -FilePath $env:SQLCMD_EXE -ArgumentList $sqlcmdArgs -Wait -PassThru -NoNewWindow
                  if ($process.ExitCode -eq 0) {
                      Write-Host "SUCCESS: $trimmedFile"
                      $DEPLOYED++
                  } else {
                      Write-Error "Failed to deploy: $trimmedFile"
                      exit 1
                  }
              } else {
                  Write-Error "File not found: $trimmedFile"
                  exit 1
              }
          }
          Write-Host "Deployed $DEPLOYED DROP files"

  create_prod_tag:
    if: ${{ success() }}
    needs: [deploy_create_prod, deploy_alter_prod, deploy_drop_prod]
    runs-on: [self-hosted, Windows]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create production tag
        shell: powershell
        run: |
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          $tagName = "prod-$timestamp"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a $tagName -m "Production deployment $timestamp"
          git push origin $tagName
          Write-Host "Created production tag: $tagName"

  upload_logs_prod:
    if: ${{ always() }}
    needs: [compute_changes, deploy_create_prod, deploy_alter_prod, deploy_drop_prod]
    runs-on: [self-hosted, Windows]
    steps:
      - uses: actions/checkout@v4
      - name: Upload deploy logs
        uses: actions/upload-artifact@v4
        with:
          name: production-deploy-logs
          path: |
            deploy_logs_prod/**
            deploy\__auto_backup_*.sql
          if-no-files-found: warn