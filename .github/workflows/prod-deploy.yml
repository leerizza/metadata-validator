name: Deploy to PRODUCTION

on:
  push:
    branches: [ main ]
    paths:
      - "deploy/**/*.sql"
      - ".github/workflows/**"
      - "scripts/**"
      - "rules.yml"
      - "validate_sql.py"

concurrency:
  group: prod-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    shell: cmd

jobs:
  deploy_prod:
    runs-on: [self-hosted, Windows]
    environment: production   # ← akan menunggu APPROVAL dari required reviewers
    steps:
      - uses: actions/checkout@v4

      - name: Prepare logs folder
        shell: powershell
        run: |
          $root = Join-Path $env:GITHUB_WORKSPACE 'deploy_logs_prod'
          if (!(Test-Path $root)) { New-Item -ItemType Directory -Path $root -Force | Out-Null }
          "LOGDIR=$root" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii

      - name: Ensure sqlcmd path
        run: |
          echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
          if not exist "%SQLCMD_EXE%" (
            echo ❌ sqlcmd not found at %SQLCMD_EXE%
            exit /b 1
          )

      - name: Echo target
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
        run: |
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"
          echo Target: %H%,%PORT% / DB=%D%

      - name: DNS & TCP check
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
        run: |
          nslookup %H% || (echo DNS FAIL & exit /b 1)
          powershell -Command "if(!(Test-NetConnection -ComputerName '%H%' -Port ([int]('%P%' -ne '' ? '%P%' : '1433')) -InformationLevel Quiet)){exit 1}"

      - name: Test sqlcmd login (SELECT 1)
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"

      - name: Deploy to PRODUCTION (deploy/*.sql sorted)
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
          LOGDIR: ${{ env.LOGDIR }}
        run: |
          setlocal enabledelayedexpansion
          if "%LOGDIR%"=="" set "LOGDIR=%CD%\deploy_logs_prod"
          if not exist "%LOGDIR%" mkdir "%LOGDIR%"
          set "PORT=%P%"
          if "%PORT%"=="" set "PORT=1433"
          if not exist deploy\*.sql (
            echo No SQL files in deploy\ .
            exit /b 0
          )
          for /f "delims=" %%F in ('dir /b /o:n deploy\*.sql') do (
            set "OUTLOG=%LOGDIR%\%%~nF.out.txt"
            echo Executing %%F ... > "!OUTLOG!"
            "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "deploy\%%F" -o "!OUTLOG!"
            if errorlevel 1 (
              echo FAILED on %%F
              exit /b 1
            )
          )
          echo ✅ PRODUCTION deploy done.

      - name: Upload deploy logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: production-deploy-logs
          path: |
            deploy_logs_prod/**
            deploy/*.sql
          if-no-files-found: warn
