name: Deploy to PROD (Windows Self-Hosted)

on:
  push:
    branches: ["main"]
    paths:
      - "deploy/**/*.sql"
      - ".github/workflows/deploy-prod-windows.yml"
  workflow_dispatch: {}

concurrency:
  group: deploy-prod
  cancel-in-progress: false

defaults:
  run:
    shell: cmd

jobs:
  deploy:
    runs-on: [self-hosted, Windows]
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Ensure sqlcmd is available (detect or install)
        run: |
          where sqlcmd >NUL 2>&1 && (for /f "delims=" %%A in ('where sqlcmd') do (echo SQLCMD_EXE=%%A>>%GITHUB_ENV)) && goto :done_sqlcmd
          powershell -ExecutionPolicy Bypass -NoProfile -Command ^
            "$ErrorActionPreference='Stop';" ^
            "$paths = @(" ^
            "'$env:ProgramFiles\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\sqlcmd.exe'," ^
            "'$env:ProgramFiles\\Microsoft SQL Server\\160\\Tools\\Binn\\sqlcmd.exe'," ^
            "'$env:ProgramFiles\\Microsoft SQL Server\\150\\Tools\\Binn\\sqlcmd.exe'" ^
            ");" ^
            "$exe = $paths | Where-Object { Test-Path $_ } | Select-Object -First 1;" ^
            "if (-not $exe) {" ^
            "  try { winget install Microsoft.SQLServer.CommandLineTools --accept-package-agreements --accept-source-agreements -h 0 } catch { Write-Host 'winget failed or blocked'; }" ^
            "  $exe = (Get-Command sqlcmd -ErrorAction SilentlyContinue).Source" ^
            "};" ^
            "if (-not $exe) { throw 'sqlcmd not found. Install it on the runner.' };" ^
            "[IO.File]::AppendAllText($env:GITHUB_ENV, 'SQLCMD_EXE=' + $exe + \"`n\");" ^
            "Write-Host ('Using sqlcmd: {0}' -f $exe);"
          :done_sqlcmd

      - name: Tool check (sqlcmd)
        run: >
          powershell -ExecutionPolicy Bypass -NoProfile -Command
          "$ErrorActionPreference='Stop'; & $env:SQLCMD_EXE -? | Out-Null; Write-Host 'sqlcmd OK'"

      - name: Deploy to PROD (deploy\*.sql sorted)
        id: deploy
        env:
          H: ${{ secrets.DB_HOST }}
          P: ${{ secrets.DB_PORT }}
          D: ${{ secrets.DB_NAME }}
          U: ${{ secrets.DB_USER }}
          W: ${{ secrets.DB_PASSWORD }}
          USE_INTEGRATED_PROD: ${{ vars.USE_INTEGRATED_PROD }}   # "true"/"false"
        run: >
          powershell -ExecutionPolicy Bypass -NoProfile -Command
          "$ErrorActionPreference='Stop';
           if([string]::IsNullOrWhiteSpace($env:H)){ throw 'Secret DB_HOST kosong' };
           $port= if([string]::IsNullOrWhiteSpace($env:P)){'1433'} else {$env:P};
           if($port -notmatch '^\d+$'){ throw ('DB_PORT invalid: {0}' -f $port) };
           $server = '{0},{1}' -f $env:H,$port;
           $scripts = Get-ChildItem -Path 'deploy' -Filter '*.sql' | Sort-Object Name;
           if(-not $scripts){ 'No SQL files in deploy/. Skipping PROD deploy.' | Out-File -FilePath deploy-summary.md -Encoding utf8; exit 0 }
           '## PROD Deploy`n' | Out-File -FilePath deploy-summary.md -Encoding utf8;
           ('**Target:** {0}/{1}`n' -f $server,$env:D) | Out-File -Append deploy-summary.md -Encoding utf8;
           '**Executed files:**' | Out-File -Append deploy-summary.md -Encoding utf8;
           foreach($s in $scripts){
             ('- `{0}`' -f ($s.FullName -replace '\\','/')) | Out-File -Append deploy-summary.md -Encoding utf8;
             $base = @('-S',$server,'-d',$env:D,'-l','45','-b','-C','-i',$s.FullName);
             if(($env:USE_INTEGRATED_PROD).ToString().ToLower() -eq 'true'){ $args = $base + '-E' }
             else {
               if([string]::IsNullOrWhiteSpace($env:U) -or [string]::IsNullOrWhiteSpace($env:W)){ throw 'SQL Auth dipilih tapi DB_USER/PASSWORD kosong' }
               $args = $base + @('-U',$env:U,'-P',$env:W)
             }
             & $env:SQLCMD_EXE @args; if($LASTEXITCODE -ne 0){ throw ('sqlcmd failed on {0} with exit code {1}' -f $s.Name,$LASTEXITCODE) }
           }
           '`n**Recent objects (created/modified in last 60 minutes)**' | Out-File -Append deploy-summary.md -Encoding utf8;
           $qry = @'
           SET NOCOUNT ON;
           SELECT TOP (50)
             s.name + '.' + t.name AS table_name,
             t.create_date,
             t.modify_date
           FROM sys.tables t
           JOIN sys.schemas s ON s.schema_id = t.schema_id
           WHERE t.create_date >= DATEADD(MINUTE, -60, SYSUTCDATETIME())
              OR t.modify_date >= DATEADD(MINUTE, -60, SYSUTCDATETIME())
           ORDER BY t.modify_date DESC, t.create_date DESC;
'@;
           $base2 = @('-S',$server,'-d',$env:D,'-l','20','-b','-C','-h','-1','-W','-s',' | ','-Q',$qry);
           if(($env:USE_INTEGRATED_PROD).ToString().ToLower() -eq 'true'){ $args2 = $base2 + '-E' } else { $args2 = $base2 + @('-U',$env:U,'-P',$env:W) }
           try { (& $env:SQLCMD_EXE @args2) | Out-File -Append deploy-summary.md -Encoding utf8 } catch { '_(No recent changes or query failed)_' | Out-File -Append deploy-summary.md -Encoding utf8 }"

      - name: Upload deploy summary
        uses: actions/upload-artifact@v4
        with:
          name: prod-deploy-summary
          path: deploy-summary.md
