name: Deploy to PROD (Windows Self-Hosted)

on:
  push:
    branches: ["main"]
    paths:
      - "tables/**/*.yml"
      - "tables/**/*.yaml"
      - "scripts/metadata_validate_and_render.py"
      - "rules.yml"
      - ".github/workflows/deploy-prod-windows.yml"
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: write

defaults:
  run:
    shell: cmd

jobs:
  validate_and_deploy_prod:
    runs-on: [self-hosted, Windows]
    environment: production

    steps:
      - uses: actions/checkout@v4

      # Python lokal + venv (tanpa admin)
      - name: Resolve Python path
        run: |
          where python || (echo ❌ Python not found in PATH & exit /b 1)
          set "PY="
          for /f "delims=" %%i in ('where python') do (
            echo %%i | findstr /i "\\WindowsApps\\" >nul && (rem skip) || (
              set "PY=%%i"
              goto :found
            )
          )
          :found
          if "%PY%"=="" (echo ❌ No real python.exe found & exit /b 1)
          echo PYTHON_EXE=%PY%>>%GITHUB_ENV%

      - name: Create venv & install deps
        run: |
          "%PYTHON_EXE%" -m venv .venv
          set "VENV_PY=%CD%\.venv\Scripts\python.exe"
          echo VENV_PY=%VENV_PY%>>%GITHUB_ENV%
          "%VENV_PY%" -m pip install --upgrade pip
          "%VENV_PY%" -m pip install -r requirements.txt

      - name: Use sqlcmd path from repo variable
        run: |
          echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
          if not exist "${{ vars.SQLCMD_EXE }}" (
            echo sqlcmd.exe not found at: ${{ vars.SQLCMD_EXE }}
            exit /b 1
          )

      # === Generate SQL dari metadata + RULES (ENV=production) ===
      - name: Generate SQL (production rules)
        env:
          ENVIRONMENT: production
        run: |
          "%VENV_PY%" scripts/metadata_validate_and_render.py tables deploy

      # === Preflight PROD ===
      - name: Echo target
        env:
          H: ${{ secrets.PROD_DB_HOST }}   # dwdb
          P: ${{ secrets.PROD_DB_PORT }}   # 1433
          D: ${{ secrets.PROD_DB_NAME }}   # DQ_PROD
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          if "%H%"=="" ( echo ❌ PROD_DB_HOST empty & exit /b 1 )
          echo Using sqlcmd: %SQLCMD_EXE%
          echo Target: %H%,%PORT% / DB=%D%

      - name: DNS resolve
        env: { H: ${{ secrets.PROD_DB_HOST }} }
        run: nslookup %H% || (echo ❌ DNS FAILED & exit /b 1)

      - name: TCP port check
        env: { H: ${{ secrets.PROD_DB_HOST }}, P: ${{ secrets.PROD_DB_PORT }} }
        run: >
          powershell -NoProfile -ExecutionPolicy Bypass -Command
          "$p='%P%'; if([string]::IsNullOrWhiteSpace($p)){$p='1433'}
           if(!(Test-NetConnection -ComputerName '%H%' -Port ([int]$p) -InformationLevel Quiet)){ exit 1 }"

      - name: Test sqlcmd login (SELECT 1)
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"
          if errorlevel 1 exit /b 1

      # Guard tipe terlarang
      - name: Block disallowed types in deploy SQL (no MAX, no legacy LOB)
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $files = Get-ChildItem -Path 'deploy' -Filter '*.sql' -Recurse -ErrorAction SilentlyContinue
          if (-not $files){ Write-Host 'No SQL files under deploy/.'; exit 0 }
          $bad    = Select-String -Path $files.FullName -Pattern '\b(?:n?varchar|varbinary)\s*\(\s*max\s*\)'
          $legacy = Select-String -Path $files.FullName -Pattern '\b(?:text|ntext|image)\b'
          if ($bad -or $legacy){ Write-Host 'Disallowed types found.'; exit 1 }

      # === DEPLOY PROD ===
      - name: Deploy to PROD (dwdb / DQ_PROD)
        env:
          H: ${{ secrets.PROD_DB_HOST }}
          P: ${{ secrets.PROD_DB_PORT }}
          D: ${{ secrets.PROD_DB_NAME }}
          U: ${{ secrets.PROD_DB_USER }}
          W: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          if exist deploy\*.sql (
            for /f "delims=" %%F in ('dir /b /o:n deploy\*.sql') do (
              echo Executing %%~nxF ...
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "deploy\%%F"
              if errorlevel 1 ( echo ❌ FAILED on %%~nxF & exit /b 1 )
            )
          ) else (
            echo _No SQL files in deploy/._
          )
