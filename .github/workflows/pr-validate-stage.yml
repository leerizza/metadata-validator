name: Validate & Deploy to STAGING (Modular, PowerShell)

on:
  pull_request:
    paths:
      - "deploy/**/*.sql"
      - "tables/**/*.yml"
      - "tables/**/*.yaml"
      - "scripts/**"
      - "rules.yml"
      - ".github/workflows/**"

jobs:
  setup:
    runs-on: [self-hosted, Windows]
    outputs:
      create_changed: ${{ steps.chg_create.outputs.has_changes }}
      create_count:   ${{ steps.chg_create.outputs.file_count }}
      alter_changed:  ${{ steps.chg_alter.outputs.has_changes }}
      alter_count:    ${{ steps.chg_alter.outputs.file_count }}
      drop_changed:   ${{ steps.chg_drop.outputs.has_changes }}
      drop_count:     ${{ steps.chg_drop.outputs.file_count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve sqlcmd
        shell: powershell
        env:
          VAR_SQLCMD: ${{ vars.SQLCMD_EXE }}
        run: |
          $ErrorActionPreference='Stop'
          function Exists($p){ if([string]::IsNullOrWhiteSpace($p)){return $false}; Test-Path -LiteralPath $p }
          $c=@()
          if($env:VAR_SQLCMD){ $c+=$env:VAR_SQLCMD }
          try{
            $found=& where.exe sqlcmd 2>$null
            if($LASTEXITCODE -eq 0){ $c+=($found -split "`r?`n" | ? { $_ -and (Test-Path -LiteralPath $_) }) }
          }catch{}
          $c+=@(
            "C:\Program Files\SqlCmd\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe"
          )
          $pick=$c|?{Exists $_}|Select-Object -First 1
          if(-not $pick){ throw "sqlcmd.exe not found. Set repo variable SQLCMD_EXE or install SQL tools." }
          Add-Content -Path $env:GITHUB_ENV -Value "SQLCMD_EXE=$pick" -Encoding ascii
          Write-Host "Using sqlcmd: $pick"

      - name: DNS & TCP checks (STAGING)
        shell: powershell
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: |
          $ErrorActionPreference='Stop'
          nslookup $env:H | Out-Host
          $port = if([string]::IsNullOrWhiteSpace($env:P)) { 1433 } else { [int]$env:P }
          if(-not (Test-NetConnection -ComputerName $env:H -Port $port -InformationLevel Quiet)){ throw "TCP $($env:H):$port unreachable" }

      - name: Test sqlcmd login (STAGING)
        shell: powershell
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          $ErrorActionPreference='Stop'
          $port = if([string]::IsNullOrWhiteSpace($env:P)) { '1433' } else { $env:P }
          Write-Host ("Target: {0},{1} / DB={2}" -f $env:H,$port,$env:D)
          & $env:SQLCMD_EXE -S "$($env:H),$port" -d $env:D -U $env:U -P $env:W -l 10 -b -C -Q "SELECT 1"

      - name: Compute CREATE changes
        id: chg_create
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          git config --global --add safe.directory "$env:GITHUB_WORKSPACE" 2>$null
          try { git fetch origin --depth=100 2>$null; git fetch --all --tags --prune 2>$null } catch {}

          $base='${{ github.base_ref }}'
          if ($base) {
            try { git fetch origin "${base}:refs/remotes/origin/$base" --depth=100 2>$null } catch {}
            $range="origin/$base...HEAD"
          } else {
            $before='${{ github.event.before }}'
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') { $range='HEAD~1...HEAD' } else { $range="$before...HEAD" }
          }

          $all = @()
          if (Test-Path -LiteralPath 'deploy/create') {
            $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/create/*.sql" 2>$null
            $wt   = git ls-files -mo --exclude-standard -- "deploy/create/*.sql" 2>$null
            if($diff){ $all+=$diff }
            if($wt){ $all+=$wt }
            $all=$all | Where-Object { $_ -and (Test-Path -LiteralPath $_) } | Sort-Object -Unique
          }
          Write-Host "Found $($all.Count) CREATE file(s)"

          $outFile = '_changed_create.txt'
          if ($all.Count -gt 0) {
            $all | Set-Content -LiteralPath $outFile -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_changes=true" -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value ("file_count={0}" -f $all.Count) -Encoding ascii
          } else {
            "" | Set-Content -LiteralPath $outFile -Encoding ascii -NoNewline
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_changes=false" -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value "file_count=0" -Encoding ascii
          }

      - name: Compute ALTER changes
        id: chg_alter
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $base='${{ github.base_ref }}'
          if ($base) { $range="origin/$base...HEAD" } else {
            $before='${{ github.event.before }}'
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') { $range='HEAD~1...HEAD' } else { $range="$before...HEAD" }
          }

          $all = @()
          if (Test-Path -LiteralPath 'deploy/alter') {
            $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/alter/*.sql" 2>$null
            $wt   = git ls-files -mo --exclude-standard -- "deploy/alter/*.sql" 2>$null
            if($diff){ $all+=$diff }
            if($wt){ $all+=$wt }
            $all=$all | Where-Object { $_ -and (Test-Path -LiteralPath $_) } | Sort-Object -Unique
          }
          Write-Host "Found $($all.Count) ALTER file(s)"

          $outFile = '_changed_alter.txt'
          if ($all.Count -gt 0) {
            $all | Set-Content -LiteralPath $outFile -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_changes=true" -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value ("file_count={0}" -f $all.Count) -Encoding ascii
          } else {
            "" | Set-Content -LiteralPath $outFile -Encoding ascii -NoNewline
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_changes=false" -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value "file_count=0" -Encoding ascii
          }

      - name: Compute DROP changes
        id: chg_drop
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $base='${{ github.base_ref }}'
          if ($base) { $range="origin/$base...HEAD" } else {
            $before='${{ github.event.before }}'
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') { $range='HEAD~1...HEAD' } else { $range="$before...HEAD" }
          }

          $all = @()
          if (Test-Path -LiteralPath 'deploy/drop') {
            $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/drop/*.sql" 2>$null
            $wt   = git ls-files -mo --exclude-standard -- "deploy/drop/*.sql" 2>$null
            if($diff){ $all+=$diff }
            if($wt){ $all+=$wt }
            $all=$all | Where-Object { $_ -and (Test-Path -LiteralPath $_) } | Sort-Object -Unique
          }
          Write-Host "Found $($all.Count) DROP file(s)"

          $outFile = '_changed_drop.txt'
          if ($all.Count -gt 0) {
            $all | Set-Content -LiteralPath $outFile -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_changes=true" -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value ("file_count={0}" -f $all.Count) -Encoding ascii
          } else {
            "" | Set-Content -LiteralPath $outFile -Encoding ascii -NoNewline
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_changes=false" -Encoding ascii
            Add-Content -Path $env:GITHUB_OUTPUT -Value "file_count=0" -Encoding ascii
          }

      - name: Upload change lists
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: changed-sql-lists
          path: _changed_*.txt
          if-no-files-found: ignore
          retention-days: 7

  deploy_create_stg:
    needs: setup
    if: needs.setup.outputs.create_changed == 'true' && needs.setup.outputs.create_count != '0'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: changed-sql-lists

      - name: Sanitize & show list (CREATE)
        shell: powershell
        run: |
          $p = "_changed_create.txt"
          if (!(Test-Path -LiteralPath $p)) { throw "Missing $p" }
          $bom = [char]0xFEFF
          $lines = Get-Content -LiteralPath $p | ForEach-Object { $_.Replace($bom,'').Trim() } | Where-Object { $_ }
          $lines | Set-Content -LiteralPath $p -Encoding ascii
          Write-Host "CREATE files:"
          $lines | ForEach-Object { "  - $_" }

      - name: Deploy CREATE (changed only)
        shell: powershell
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          $ErrorActionPreference='Stop'
          $sqlcmd = $env:SQLCMD_EXE; if(-not $sqlcmd){ $sqlcmd='sqlcmd' }
          $port = if([string]::IsNullOrWhiteSpace($env:P)){'1433'} else {$env:P}
          $list = Get-Content -LiteralPath '_changed_create.txt' | Where-Object { $_ -and (Test-Path -LiteralPath $_) }
          if(-not $list){ throw "No CREATE files to deploy." }
          $deployed = 0
          foreach($f in $list){
            Write-Host "`n[DEPLOY] CREATE: $f"
            & $sqlcmd -S "$($env:H),$port" -d $env:D -U $env:U -P $env:W -b -C -i $f
            if($LASTEXITCODE -ne 0){ throw "Failed executing $f" }
            $deployed++
          }
          Write-Host "Deployed CREATE files: $deployed"

  deploy_alter_stg:
    needs: [setup, deploy_create_stg]
    if: needs.setup.outputs.alter_changed == 'true' && needs.setup.outputs.alter_count != '0'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: changed-sql-lists

      - name: Sanitize & show list (ALTER)
        shell: powershell
        run: |
          $p = "_changed_alter.txt"
          if (!(Test-Path -LiteralPath $p)) { throw "Missing $p" }
          $bom = [char]0xFEFF
          $lines = Get-Content -LiteralPath $p | ForEach-Object { $_.Replace($bom,'').Trim() } | Where-Object { $_ }
          $lines | Set-Content -LiteralPath $p -Encoding ascii
          Write-Host "ALTER files:"
          $lines | ForEach-Object { "  - $_" }

      - name: Deploy ALTER (changed only)
        shell: powershell
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          $ErrorActionPreference='Stop'
          $sqlcmd = $env:SQLCMD_EXE; if(-not $sqlcmd){ $sqlcmd='sqlcmd' }
          $port = if([string]::IsNullOrWhiteSpace($env:P)){'1433'} else {$env:P}
          $list = Get-Content -LiteralPath '_changed_alter.txt' | Where-Object { $_ -and (Test-Path -LiteralPath $_) }
          if(-not $list){ throw "No ALTER files to deploy." }
          $deployed = 0
          foreach($f in $list){
            Write-Host "`n[DEPLOY] ALTER: $f"
            & $sqlcmd -S "$($env:H),$port" -d $env:D -U $env:U -P $env:W -b -C -i $f
            if($LASTEXITCODE -ne 0){ throw "Failed executing $f" }
            $deployed++
          }
          Write-Host "Deployed ALTER files: $deployed"

  deploy_drop_stg:
    needs: [setup, deploy_alter_stg]
    if: needs.setup.outputs.drop_changed == 'true' && needs.setup.outputs.drop_count != '0'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: changed-sql-lists

      - name: Sanitize & show list (DROP)
        shell: powershell
        run: |
          $p = "_changed_drop.txt"
          if (!(Test-Path -LiteralPath $p)) { throw "Missing $p" }
          $bom = [char]0xFEFF
          $lines = Get-Content -LiteralPath $p | ForEach-Object { $_.Replace($bom,'').Trim() } | Where-Object { $_ }
          $lines | Set-Content -LiteralPath $p -Encoding ascii
          Write-Host "DROP files:"
          $lines | ForEach-Object { "  - $_" }

      - name: Guard allowlist DROP
        shell: powershell
        run: |
          $allowPath = '.github\drop-allowlist.txt'
          if(!(Test-Path -LiteralPath $allowPath)){
            Write-Warning "No drop-allowlist.txt -> all DROP blocked"
            exit 1
          }
          $allow = Get-Content -LiteralPath $allowPath
          $rx=[regex]'(?is)\bdrop\s+table\s+(?:\[?(?<s>\w+)\]?\.)?\[?(?<t>\w+)\]?'
          foreach($f in Get-Content -LiteralPath '_changed_drop.txt'){
            if(!(Test-Path -LiteralPath $f)){ throw "File not found in workspace: $f" }
            $c=Get-Content -LiteralPath $f -Raw
            foreach($m in $rx.Matches($c)){
              $s=$m.Groups['s'].Success?$m.Groups['s'].Value:'dbo'
              $t=$m.Groups['t'].Value
              $full="$s.$t"
              if($allow -notcontains $full){ throw "DROP not in allowlist: $full (file $f)"}
            }
          }

      - name: Deploy DROP (changed only)
        shell: powershell
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          $ErrorActionPreference='Stop'
          $sqlcmd = $env:SQLCMD_EXE; if(-not $sqlcmd){ $sqlcmd='sqlcmd' }
          $port = if([string]::IsNullOrWhiteSpace($env:P)){'1433'} else {$env:P}
          $list = Get-Content -LiteralPath '_changed_drop.txt' | Where-Object { $_ -and (Test-Path -LiteralPath $_) }
          if(-not $list){ throw "No DROP files to deploy." }
          $deployed = 0
          foreach($f in $list){
            Write-Host "`n[DEPLOY] DROP: $f"
            & $sqlcmd -S "$($env:H),$port" -d $env:D -U $env:U -P $env:W -b -C -i $f
            if($LASTEXITCODE -ne 0){ throw "Failed executing $f" }
            $deployed++
          }
          Write-Host "Deployed DROP files: $deployed"
