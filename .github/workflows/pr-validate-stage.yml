name: Validate & Deploy to STAGING (Modular)

on:
  pull_request:
    paths:
      - "deploy/**/*.sql"
      - "tables/**/*.yml"
      - "tables/**/*.yaml"
      - "scripts/**"
      - "rules.yml"
      - ".github/workflows/**"

defaults:
  run:
    shell: cmd

jobs:
  setup:
    runs-on: [self-hosted, Windows]
    outputs:
      create_changed: ${{ steps.chg_create.outputs.has_changes }}
      create_list:    ${{ steps.chg_create.outputs.changed_list }}
      alter_changed:  ${{ steps.chg_alter.outputs.has_changes }}
      alter_list:     ${{ steps.chg_alter.outputs.changed_list }}
      drop_changed:   ${{ steps.chg_drop.outputs.has_changes }}
      drop_list:      ${{ steps.chg_drop.outputs.changed_list }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve sqlcmd
        shell: powershell
        env:
          VAR_SQLCMD: ${{ vars.SQLCMD_EXE }}
        run: |
          $ErrorActionPreference='Stop'
          function Exists($p){ if([string]::IsNullOrWhiteSpace($p)){return $false}; Test-Path $p }
          $c=@()
          if($env:VAR_SQLCMD){ $c+=$env:VAR_SQLCMD }
          try{ $found=& where.exe sqlcmd 2>$null; if($LASTEXITCODE -eq 0){ $c+=($found -split "`r?`n" | ? { $_ -and (Test-Path $_) }) } }catch{}
          $c+=@(
            "C:\Program Files\SqlCmd\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe",
            "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe"
          )
          $pick=$c|?{Exists $_}|Select-Object -First 1
          if(-not $pick){ throw "sqlcmd.exe not found. Set repo variable SQLCMD_EXE or install SQL tools." }
          "SQLCMD_EXE=$pick" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ascii
          Write-Host "Using sqlcmd: $pick"

      - name: DNS & TCP checks (STAGING)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: |
          nslookup %H% || (echo DNS FAILED & exit /b 1)
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          powershell -Command "if(!(Test-NetConnection -ComputerName '%H%' -Port ([int]'%PORT%') -InformationLevel Quiet)){exit 1}"

      - name: Test sqlcmd login (STAGING)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          echo Target: %H%,%PORT% / DB=%D%
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"

      - name: Compute CREATE changes
        id: chg_create
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          git config --global --add safe.directory "$env:GITHUB_WORKSPACE" 2>$null
          try { git fetch --all --tags --prune 2>$null } catch {}
          $base='${{ github.base_ref }}'
          if ($base) {
            try { git fetch origin $base --depth=50 2>$null } catch {}
            $range="origin/$base...HEAD"
          } else {
            $before='${{ github.event.before }}'
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') { $range='HEAD~1...HEAD' } else { $range="$before...HEAD" }
          }
          Write-Host "Diff range (CREATE): $range"
          $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/create/*.sql"
          $wt   = git ls-files -mo --exclude-standard -- "deploy/create/*.sql"
          $all  = @(); if($diff){$all+=$diff}; if($wt){$all+=$wt}; $all=$all|Sort-Object -Unique
          if($all.Count -gt 0){
            $p='deploy\_changed_create.txt';$all|Set-Content $p -Enc UTF8
            "has_changes=true"  | Out-File $env:GITHUB_OUTPUT -Append
            "changed_list=$p"   | Out-File $env:GITHUB_OUTPUT -Append
            Write-Host "CREATE changed:"; Get-Content $p | % { ' - ' + $_ }
          } else {
            "has_changes=false" | Out-File $env:GITHUB_OUTPUT -Append
            "changed_list="     | Out-File $env:GITHUB_OUTPUT -Append
            Write-Host "No CREATE changes (range $range)"
          }

      - name: Compute ALTER changes
        id: chg_alter
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $base='${{ github.base_ref }}'
          if ($base) { $range="origin/$base...HEAD" } else {
            $before='${{ github.event.before }}'
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') { $range='HEAD~1...HEAD' } else { $range="$before...HEAD" }
          }
          Write-Host "Diff range (ALTER): $range"
          $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/alter/*.sql"
          $wt   = git ls-files -mo --exclude-standard -- "deploy/alter/*.sql"
          $all  = @(); if($diff){$all+=$diff}; if($wt){$all+=$wt}; $all=$all|Sort-Object -Unique
          if($all.Count -gt 0){
            $p='deploy\_changed_alter.txt';$all|Set-Content $p -Enc UTF8
            "has_changes=true"  | Out-File $env:GITHUB_OUTPUT -Append
            "changed_list=$p"   | Out-File $env:GITHUB_OUTPUT -Append
            Write-Host "ALTER changed:"; Get-Content $p | % { ' - ' + $_ }
          } else {
            "has_changes=false" | Out-File $env:GITHUB_OUTPUT -Append
            "changed_list="     | Out-File $env:GITHUB_OUTPUT -Append
            Write-Host "No ALTER changes (range $range)"
          }

      - name: Compute DROP changes
        id: chg_drop
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $base='${{ github.base_ref }}'
          if ($base) { $range="origin/$base...HEAD" } else {
            $before='${{ github.event.before }}'
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') { $range='HEAD~1...HEAD' } else { $range="$before...HEAD" }
          }
          Write-Host "Diff range (DROP): $range"
          $diff = git -c core.quotepath=false diff --name-only --diff-filter=AMR $range -- "deploy/drop/*.sql"
          $wt   = git ls-files -mo --exclude-standard -- "deploy/drop/*.sql"
          $all  = @(); if($diff){$all+=$diff}; if($wt){$all+=$wt}; $all=$all|Sort-Object -Unique
          if($all.Count -gt 0){
            $p='deploy\_changed_drop.txt';$all|Set-Content $p -Enc UTF8
            "has_changes=true"  | Out-File $env:GITHUB_OUTPUT -Append
            "changed_list=$p"   | Out-File $env:GITHUB_OUTPUT -Append
            Write-Host "DROP changed:"; Get-Content $p | % { ' - ' + $_ }
          } else {
            "has_changes=false" | Out-File $env:GITHUB_OUTPUT -Append
            "changed_list="     | Out-File $env:GITHUB_OUTPUT -Append
            Write-Host "No DROP changes (range $range)"
          }

      - name: Upload change lists
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: changed-sql-lists
          path: |
            deploy\_changed_create.txt
            deploy\_changed_alter.txt
            deploy\_changed_drop.txt
          if-no-files-found: ignore

  deploy_create_stg:
    needs: setup
    if: needs.setup.outputs.create_changed == 'true'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: changed-sql-lists

      - name: Resolve & check sqlcmd
        shell: cmd
        run: |
          setlocal EnableExtensions EnableDelayedExpansion

          rem 1) Try repo variable first
          set "SQLCMD_EXE=${{ vars.SQLCMD_EXE }}"

          rem 2) Probe common install paths if not set / not found
          if not defined SQLCMD_EXE if exist "C:\Program Files\SqlCmd\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\SqlCmd\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe"

          rem 3) Fallback to PATH
          if not defined SQLCMD_EXE (
            for /f "delims=" %%I in ('where sqlcmd 2^>NUL') do if not defined SQLCMD_EXE set "SQLCMD_EXE=%%I"
          )

          rem 4) Hard fail if still not found
          if not defined SQLCMD_EXE (
            echo ❌ sqlcmd.exe not found. Set repository variable SQLCMD_EXE or install SQL tools.
            exit /b 1
          )

          rem 5) Verify it runs and export for next steps
          echo Using sqlcmd: %SQLCMD_EXE%
          "%SQLCMD_EXE%" -? >NUL || (echo ❌ sqlcmd not executable & exit /b 1)
          echo SQLCMD_EXE=%SQLCMD_EXE%>>%GITHUB_ENV%


      - name: Show changed list (CREATE)
        run: |
          if not exist "deploy\_changed_create.txt" ( echo Missing deploy\_changed_create.txt & exit /b 1 )
          type deploy\_changed_create.txt
      - name: Deploy CREATE (changed only)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_create.txt`) do (
            if exist "%%F" (
              echo CREATE -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            ) else (
              echo File not found: %%F & exit /b 1
            )
          )

  deploy_alter_stg:
    needs: [setup, deploy_create_stg]
    if: needs.setup.outputs.alter_changed == 'true'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: changed-sql-lists

      - name: Resolve & check sqlcmd
        shell: cmd
        run: |
          setlocal EnableExtensions EnableDelayedExpansion

          rem 1) Try repo variable first
          set "SQLCMD_EXE=${{ vars.SQLCMD_EXE }}"

          rem 2) Probe common install paths if not set / not found
          if not defined SQLCMD_EXE if exist "C:\Program Files\SqlCmd\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\SqlCmd\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe"

          rem 3) Fallback to PATH
          if not defined SQLCMD_EXE (
            for /f "delims=" %%I in ('where sqlcmd 2^>NUL') do if not defined SQLCMD_EXE set "SQLCMD_EXE=%%I"
          )

          rem 4) Hard fail if still not found
          if not defined SQLCMD_EXE (
            echo ❌ sqlcmd.exe not found. Set repository variable SQLCMD_EXE or install SQL tools.
            exit /b 1
          )

          rem 5) Verify it runs and export for next steps
          echo Using sqlcmd: %SQLCMD_EXE%
          "%SQLCMD_EXE%" -? >NUL || (echo ❌ sqlcmd not executable & exit /b 1)
          echo SQLCMD_EXE=%SQLCMD_EXE%>>%GITHUB_ENV%


      - name: Show changed list (ALTER)
        run: |
          if not exist "deploy\_changed_alter.txt" ( echo Missing deploy\_changed_alter.txt & exit /b 1 )
          type deploy\_changed_alter.txt
      - name: Deploy ALTER (changed only)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_alter.txt`) do (
            if exist "%%F" (
              echo ALTER -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            ) else (
              echo File not found: %%F & exit /b 1
            )
          )

  deploy_drop_stg:
    needs: [setup, deploy_alter_stg]
    if: needs.setup.outputs.drop_changed == 'true'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: changed-sql-lists

      - name: Resolve & check sqlcmd
        shell: cmd
        run: |
          setlocal EnableExtensions EnableDelayedExpansion

          rem 1) Try repo variable first
          set "SQLCMD_EXE=${{ vars.SQLCMD_EXE }}"

          rem 2) Probe common install paths if not set / not found
          if not defined SQLCMD_EXE if exist "C:\Program Files\SqlCmd\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\SqlCmd\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\160\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\150\Tools\Binn\sqlcmd.exe"
          if not defined SQLCMD_EXE if exist "C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe" set "SQLCMD_EXE=C:\Program Files\Microsoft SQL Server\140\Tools\Binn\sqlcmd.exe"

          rem 3) Fallback to PATH
          if not defined SQLCMD_EXE (
            for /f "delims=" %%I in ('where sqlcmd 2^>NUL') do if not defined SQLCMD_EXE set "SQLCMD_EXE=%%I"
          )

          rem 4) Hard fail if still not found
          if not defined SQLCMD_EXE (
            echo ❌ sqlcmd.exe not found. Set repository variable SQLCMD_EXE or install SQL tools.
            exit /b 1
          )

          rem 5) Verify it runs and export for next steps
          echo Using sqlcmd: %SQLCMD_EXE%
          "%SQLCMD_EXE%" -? >NUL || (echo ❌ sqlcmd not executable & exit /b 1)
          echo SQLCMD_EXE=%SQLCMD_EXE%>>%GITHUB_ENV%



      - name: Guard allowlist DROP
        shell: powershell
        run: |
          $allow=Get-Content -ErrorAction SilentlyContinue '.github\drop-allowlist.txt'
          if(-not $allow){Write-Host "::warning No drop-allowlist.txt -> all DROP blocked";exit 1}
          $rx=[regex]'(?is)\bdrop\s+table\s+(?:\[?(?<s>\w+)\]?\.)?\[?(?<t>\w+)\]?'
          foreach($f in Get-Content 'deploy\_changed_drop.txt'){
            $c=Get-Content $f -Raw
            foreach($m in $rx.Matches($c)){
              $s=$m.Groups['s'].Success?$m.Groups['s'].Value:'dbo'
              $t=$m.Groups['t'].Value
              $full="$s.$t"
              if($allow -notcontains $full){Write-Error "DROP not in allowlist: $full (file $f)"}
            }
          }
      - name: Show changed list (DROP)
        run: |
          if not exist "deploy\_changed_drop.txt" ( echo Missing deploy\_changed_drop.txt & exit /b 1 )
          type deploy\_changed_drop.txt
      - name: Deploy DROP (changed only)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_drop.txt`) do (
            if exist "%%F" (
              echo DROP -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            ) else (
              echo File not found: %%F & exit /b 1
            )
          )
