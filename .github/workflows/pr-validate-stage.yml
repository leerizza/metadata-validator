name: Validate & Deploy to STAGING (Modular)

on:
  pull_request:
    paths:
      - "deploy/**/*.sql"
      - "tables/**/*.yml"
      - "tables/**/*.yaml"
      - "scripts/**"
      - "rules.yml"
      - ".github/workflows/**"

defaults:
  run:
    shell: cmd

jobs:
  setup:
    runs-on: [self-hosted, Windows]
    outputs:
      create_changed: ${{ steps.chg_create.outputs.has_changes }}
      create_list: ${{ steps.chg_create.outputs.changed_list }}
      alter_changed: ${{ steps.chg_alter.outputs.has_changes }}
      alter_list: ${{ steps.chg_alter.outputs.changed_list }}
      drop_changed: ${{ steps.chg_drop.outputs.has_changes }}
      drop_list: ${{ steps.chg_drop.outputs.changed_list }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure sqlcmd path
        run: |
          echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
          if not exist "%SQLCMD_EXE%" (
            echo ❌ sqlcmd not found at %SQLCMD_EXE%
            exit /b 1
          )

      - name: DNS & TCP checks (STAGING)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
        run: |
          nslookup %H% || (echo ❌ DNS FAILED & exit /b 1)
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          powershell -Command "if(!(Test-NetConnection -ComputerName '%H%' -Port ([int]'%PORT%') -InformationLevel Quiet)){exit 1}"

      - name: Test sqlcmd login (STAGING)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -l 10 -b -C -Q "SELECT 1"

      # --- Compute changes per folder ---
      - name: Compute changes (CREATE)
        id: chg_create
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          git fetch --all --tags --prune 2>$null
          $base='${{ github.base_ref }}'
          $before='${{ github.event.before }}'
          if (-not $base) {
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') {
              $range='HEAD~1...HEAD'
            } else { $range="$before...HEAD" }
          } else { $range="origin/$base...HEAD" }
          $diff = git diff --name-only --diff-filter=AMR $range -- "deploy/create/*.sql"
          $wt = git ls-files -mo --exclude-standard -- "deploy/create/*.sql"
          $all=@(); if($diff){$all+=$diff}; if($wt){$all+=$wt}; $all=$all|Sort-Object -Unique
          if($all.Count -gt 0){$p='deploy\_changed_create.txt';$all|Set-Content $p -Enc UTF8;"has_changes=true"|Out-File $env:GITHUB_OUTPUT -Append;"changed_list=$p"|Out-File $env:GITHUB_OUTPUT -Append}else{"has_changes=false"|Out-File $env:GITHUB_OUTPUT -Append}

      - name: Compute changes (ALTER)
        id: chg_alter
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $base='${{ github.base_ref }}'
          $before='${{ github.event.before }}'
          if (-not $base) {
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') {
              $range='HEAD~1...HEAD'
            } else { $range="$before...HEAD" }
          } else { $range="origin/$base...HEAD" }
          $diff = git diff --name-only --diff-filter=AMR $range -- "deploy/alter/*.sql"
          $wt = git ls-files -mo --exclude-standard -- "deploy/alter/*.sql"
          $all=@(); if($diff){$all+=$diff}; if($wt){$all+=$wt}; $all=$all|Sort-Object -Unique
          if($all.Count -gt 0){$p='deploy\_changed_alter.txt';$all|Set-Content $p -Enc UTF8;"has_changes=true"|Out-File $env:GITHUB_OUTPUT -Append;"changed_list=$p"|Out-File $env:GITHUB_OUTPUT -Append}else{"has_changes=false"|Out-File $env:GITHUB_OUTPUT -Append}

      - name: Compute changes (DROP)
        id: chg_drop
        shell: powershell
        run: |
          $ErrorActionPreference='Stop'
          $base='${{ github.base_ref }}'
          $before='${{ github.event.before }}'
          if (-not $base) {
            if ([string]::IsNullOrWhiteSpace($before) -or $before -match '^0+$') {
              $range='HEAD~1...HEAD'
            } else { $range="$before...HEAD" }
          } else { $range="origin/$base...HEAD" }
          $diff = git diff --name-only --diff-filter=AMR $range -- "deploy/drop/*.sql"
          $wt = git ls-files -mo --exclude-standard -- "deploy/drop/*.sql"
          $all=@(); if($diff){$all+=$diff}; if($wt){$all+=$wt}; $all=$all|Sort-Object -Unique
          if($all.Count -gt 0){$p='deploy\_changed_drop.txt';$all|Set-Content $p -Enc UTF8;"has_changes=true"|Out-File $env:GITHUB_OUTPUT -Append;"changed_list=$p"|Out-File $env:GITHUB_OUTPUT -Append}else{"has_changes=false"|Out-File $env:GITHUB_OUTPUT -Append}

  deploy_create_stg:
    needs: setup
    if: needs.setup.outputs.create_changed == 'true'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Use sqlcmd
        run: echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
      - name: Deploy CREATE (changed only)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_create.txt`) do (
            if exist "%%F" (
              echo CREATE -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            )
          )

  deploy_alter_stg:
    needs: [setup, deploy_create_stg]
    if: needs.setup.outputs.alter_changed == 'true'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Use sqlcmd
        run: echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
      - name: Backup before ALTER
        shell: powershell
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          $ErrorActionPreference='Stop'
          $ts=Get-Date -Format yyyyMMddHHmmss
          $out="deploy\__auto_backup_alter_$ts.sql"
          $rx=[regex]'(?is)\balter\s+table\s+(?:\[?(?<s>\w+)\]?\.)?\[?(?<t>\w+)\]?'
          $pairs=@()
          foreach($f in Get-Content 'deploy\_changed_alter.txt'){if(Test-Path $f){$c=Get-Content $f -Raw;foreach($m in $rx.Matches($c)){$s=$m.Groups['s'].Success?$m.Groups['s'].Value:'dbo';$t=$m.Groups['t'].Value;if($t){$pairs+="$s.$t"}}}}
          $pairs=$pairs|Sort-Object -Unique
          $sb=New-Object Text.StringBuilder
          foreach($qn in $pairs){$schema,$table=$qn.Split('.');$bk="[$schema].[$table"+"__bak_$ts]";$qn2="[$schema].[$table]";[void]$sb.AppendLine("IF OBJECT_ID(N'$qn2','U') IS NOT NULL AND OBJECT_ID(N'$bk','U') IS NULL");[void]$sb.AppendLine("BEGIN SELECT * INTO $bk FROM $qn2 WITH (HOLDLOCK, TABLOCKX); END");[void]$sb.AppendLine("GO")}
          $sb.ToString() | Set-Content -Path $out -Encoding UTF8
          $port="${{ secrets.STG_DB_PORT }}"; if([string]::IsNullOrWhiteSpace($port)){$port='1433'}
          & "$env:SQLCMD_EXE" -S "${{ secrets.STG_DB_HOST }}",$port -d "${{ secrets.STG_DB_NAME }}" -U "${{ secrets.STG_DB_USER }}" -P "${{ secrets.STG_DB_PASSWORD }}" -b -C -i $out

      - name: Deploy ALTER (changed only)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_alter.txt`) do (
            if exist "%%F" (
              echo ALTER -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            )
          )

  deploy_drop_stg:
    needs: [setup, deploy_alter_stg]
    if: needs.setup.outputs.drop_changed == 'true'
    runs-on: [self-hosted, Windows]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Use sqlcmd
        run: echo SQLCMD_EXE=${{ vars.SQLCMD_EXE }}>>%GITHUB_ENV%
      - name: Guard allowlist DROP
        shell: powershell
        run: |
          $allow=Get-Content -ErrorAction SilentlyContinue '.github\drop-allowlist.txt'
          if(-not $allow){Write-Host "::warning No drop-allowlist.txt -> all DROP blocked";exit 1}
          $rx=[regex]'(?is)\bdrop\s+table\s+(?:\[?(?<s>\w+)\]?\.)?\[?(?<t>\w+)\]?'
          foreach($f in Get-Content 'deploy\_changed_drop.txt'){$c=Get-Content $f -Raw;foreach($m in $rx.Matches($c)){$s=$m.Groups['s'].Success?$m.Groups['s'].Value:'dbo';$t=$m.Groups['t'].Value;$full="$s.$t";if($allow -notcontains $full){Write-Error "DROP not in allowlist: $full (file $f)"}}}
      - name: Deploy DROP (changed only)
        env:
          H: ${{ secrets.STG_DB_HOST }}
          P: ${{ secrets.STG_DB_PORT }}
          D: ${{ secrets.STG_DB_NAME }}
          U: ${{ secrets.STG_DB_USER }}
          W: ${{ secrets.STG_DB_PASSWORD }}
        run: |
          set "PORT=%P%" & if "%PORT%"=="" set "PORT=1433"
          for /f "usebackq delims=" %%F in (`type deploy\_changed_drop.txt`) do (
            if exist "%%F" (
              echo DROP -> %%~nxF
              "%SQLCMD_EXE%" -S %H%,%PORT% -d %D% -U %U% -P %W% -b -C -i "%%F" || exit /b 1
            )
          )
